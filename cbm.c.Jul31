//To compile: gcc -o cbm cbm.c -lm 
// To run: ./cbm <filename>
// file is assumed to contain a matrix of output from MCMC
// (later): arbitrary numrows, numcols
// in format: each row is a new sample, the cols correspond to the dimensions
// numit=number of iterations, numcol=number of dimensions
#include<stdio.h>
#include<stdlib.h>
#include <stddef.h> 
#include <string.h>
//#define MATHLIB_STANDALONE 1
//#include <Rmath.h>

#define NUMIT 1000  // 1 million
#define NUMCOL 1324  //
#define VERBOSE 0 // 1=> print descriptions of output

// assume that the vector values are g(x_1),..,g(x_n)
// and expectation of interest is E(g(x))
// n is the length of the vector, and vec is the vector
// bs is the batchsize. Default is sqrt(n), if bs==0, use cuberoot of n
int cbm(int n,double *vec,int bs,double *bmres)
{
  double est,serr,sigmahatsq; 
  int a,b,Nbm; // batch number and batch size, product
  int i,k;
  double *Y;

  if (bs) // if sqroot (default)
    {   
      b=(int ) sqrt(n);
      a=n/b; // use 'div' operator
    }
  else //cuberoot
    {   
      b=(int ) pow(n,1/3);
      a=n/b; // use 'div' operator
    }

  Y=(double *)malloc(a*sizeof(double)); //memory allocation for batch means

  // computing batch means according to batch sizes
  est=0.0;
  for (k=0;k<a;k++) 
    {
      Y[k]=0.0;
      for (i=(k*b);i<=(k*b+b-1);i++)
	Y[k] = Y[k] + vec[i];
      est=est + Y[k];
      Y[k]=Y[k]/b; 
    }

  est=est/(a*b); // grand mean
  //  printf("est=%f\n",est);

  sigmahatsq=0.0;
  for (k=0;k<a;k++) 
    sigmahatsq=sigmahatsq+(Y[k]-est)*(Y[k]-est);

  sigmahatsq=sigmahatsq*b/(a-1);
  serr=sqrt(sigmahatsq/n);

  bmres[0]=est;
  bmres[1]=serr;

  return(1);
}

int main(int argc, char *argv[]) 
{
  FILE *fs = NULL;
/*   double mcmc[NUMIT][NUMCOL]; */
  double mcmc[NUMCOL][NUMIT];
  double bmres[2]; // keep batch means estimate and s.error
  double X[NUMIT]; /* each column (temporary) */
  double allres[NUMCOL][2]; /* put together results from all columns */
  int veclen;
  char *inputpath;
  int strlength;
  int i,j;

  if (argc<2)
    {
      printf("Error ! Need filename from which to read MCMC output vector.\n");
      printf("usage: %s <filename>\n",argv[0]);
      //      printf("See smcmc.README for details\n");
      exit(1);
    }

  else
    {
      strlength = strlen(argv[1]);
      inputpath = malloc(strlength*sizeof(char));
      sprintf(inputpath,"%s",argv[1]);
    }

  /* read in matrix */
  fs = fopen(inputpath,"r");
  if(fs==NULL) 
    { 
      fprintf(stderr,"\nCould not open input file %s .Exiting...\n",inputpath); 
      getchar(); 
      exit(0); 
    }

  /* read in as transpose (may be inefficient) */
  for (i=0;i<NUMIT;i++)
    for (j=0;j<NUMCOL;j++)
      fscanf(fs,"%lf ",&mcmc[j][i]);

  /* compute the cbm estimates for each column */
  for (j=0;j<NUMCOL;j++)
    {
      for (i=0;i<NUMIT;i++)
	X[i]=mcmc[j][i];  /* X is now ith column of the matrix */
      cbm(NUMIT,X,1,bmres); // compute s.error using batch means

      allres[j][0]=bmres[0];
      allres[j][1]=bmres[1];
    }
/*     printf("chain length=%d,batch means est=%f,serr=%f\n",veclen,bmres[0],bmres[1]); */
  for (j=0;j<NUMCOL;j++)
    printf("%f %f\n",allres[j][0],allres[j][1]);
  
  return EXIT_SUCCESS;
}
